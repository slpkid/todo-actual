/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/DOM.js":
/*!********************!*\
  !*** ./src/DOM.js ***!
  \********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TO_DO_DOM: () => (/* binding */ TO_DO_DOM),\n/* harmony export */   renderToDo: () => (/* binding */ renderToDo)\n/* harmony export */ });\n/* harmony import */ var _createElement__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./createElement */ \"./src/createElement.js\");\n/* harmony import */ var _todo_list__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./todo-list */ \"./src/todo-list.js\");\n/* harmony import */ var _evalString__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./evalString */ \"./src/evalString.js\");\n/* harmony import */ var _localStorage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localStorage */ \"./src/localStorage\");\n\n\n\n\n\n\nconst TO_DO_DOM = document.getElementById('to-do-library')\n\nfunction renderToDo(listElement, parent_DOM_Node, j = 0, idArray = [], firstRan = false) {\n    let i = 0\n\n    // this runs once to render the name of the parent to do list     \n    const firstRun = (() => {\n        if (firstRan == false) {\n        const DOM_TO_DO_ELEMENT = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('ul',listElement.name,parent_DOM_Node)\n        parent_DOM_Node = DOM_TO_DO_ELEMENT\n        addButton(DOM_TO_DO_ELEMENT, listElement)\n        masterMoveButton(DOM_TO_DO_ELEMENT, listElement)\n        }\n        firstRan = true\n    })();\n        \n    listElement.contents.forEach(element => {\n        idArray[j] = i\n        const listPos = `listPos${idArray.join('++')}`\n        let parentList = listElement\n        if (!element.contents) {\n            renderTask(element.name, parent_DOM_Node, listPos, element, parentList, i)\n        } else {\n            const el = renderList(element.name, parent_DOM_Node, listPos, element, parentList, i)\n            renderToDo(element, el, j + 1, idArray, parentList)\n            idArray.pop()\n        }\n        i++\n    })\n}\n\n// unrenders DOM, rerenders DOM, and saves to localStorage\nfunction update() {\n    // render DOM\n    unRenderDOM()\n    renderToDo(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY, TO_DO_DOM)\n    // save data to local storage\n    ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n}\n\n//creates a moveButton only for the master todo list\nfunction masterMoveButton(DOM_Node, listElement) {\n    const masterMoveButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button','move',DOM_Node,['master-move-button'])\n\n    masterMoveButton.style.display = 'none'\n\n    masterMoveButton.addEventListener('click', e => {\n        moveTargetParentList.transferTask(moveTarget,listElement)\n        moveTarget = undefined\n        moveTargetParentList = undefined\n        moveTargetDestination = undefined\n        update()\n    })\n}\n\n// creates a button to create new tasks or lists \nfunction addButton(DOM_Node, listElement) {\n    const addButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button','new',DOM_Node,['add-button'])\n\n    addButton.addEventListener('click', e => {\n        const queryItem = prompt('Create new list?')\n        if (queryItem === 'yes') {\n            if (queryItem === undefined||queryItem === null || queryItem === '') {\n                return\n            }\n            listElement.appendTask(new _todo_list__WEBPACK_IMPORTED_MODULE_1__.List(prompt('Enter desired list name.')))\n        } else {\n            const name = prompt('Enter Task Name.')\n            if (name === undefined||name === null || name === '') {\n                return\n            }\n            const description = prompt('Enter Description.')\n            const dueDate = prompt('Enter Due Date.')\n            const priority = prompt('Choose Priority.')\n\n            function nah(arg) {\n                if (arg === undefined ||arg ===  null ||arg ===  '') {\n                arg = 'N/A'\n                }\n                return arg\n            }\n\n            listElement.appendTask(new _todo_list__WEBPACK_IMPORTED_MODULE_1__.Task(name,nah(description),nah(dueDate),nah(priority)))\n        }\n        (0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n        unRenderDOM()\n        renderToDo(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY, TO_DO_DOM)\n    })\n\n    return addButton\n}\n\n// creates a delete button to delete a task or list\nfunction deleteButton(DOM_Node, parentListElement, i) {\n    const deleteButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button','x',DOM_Node)\n    deleteButton.addEventListener('click', e => {\n        //executes method off of parent object to delete requested item\n        parentListElement.deleteTask(i)\n        // clear DOM, then render\n        unRenderDOM()\n        renderToDo(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY, TO_DO_DOM)\n        ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n    })\n    \n    return deleteButton\n}\n\n// creates a checkbox for tasks to be updated with their completion status\nfunction checkBox(DOM_Node, listElement) {\n    const checkBox = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('input','',DOM_Node,['checkbox'])\n    // check to see if task has been completed, if yes then render as checked\n    checkBox.type = 'checkbox'    \n    if (listElement.isComplete === true) {\n        checkBox.checked = true\n    }\n    if (listElement.isComplete === false) {\n        checkBox.checked = false\n    }\n    // calls function to toggle completion status\n    checkBox.addEventListener('click', e => {\n        listElement.completeTask()\n        ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n        unRenderDOM()\n        renderToDo(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY, TO_DO_DOM)\n    })\n}\n\n//allows user to edit details\nfunction editButton(DOM_Node, listElement, parent_DOM_Node) {\n    const editButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button','edit',DOM_Node,['edit-button'])\n    const editArray = DOM_Node.querySelectorAll('.details')\n\n    // place the button next to the element\n    DOM_Node.before(editButton)\n    \n    // render each p element as an input\n    let isEditing = false\n    editButton.addEventListener('click', e => {\n        // change text to \"save\" since we're editing now\n        editButton.textContent = 'save'\n\n        // setting the list to expanded in the object\n        DOM_Node.querySelector('.show-details-button').textContent = '-'\n        listElement.showDetails = true\n        \n        if (isEditing === false) {\n            editArray.forEach ( e => {\n                e.remove()\n            })\n\n            // createElement('p','Name: ',DOM_Node,['details'])\n            parent_DOM_Node.querySelector('.name').style.display = 'none'\n            \n            // parent_DOM_Node.remove()\n            // const name = createElement('input',`${listElement.name}`,'',['details','name'])\n            const name = document.createElement('input')\n            const checkbox = parent_DOM_Node.querySelector('.checkbox')\n            name.textContent = listElement.name\n            name.classList.add('details')\n            name.classList.add('name')\n            name.classList.add('edit-name')\n            checkbox.before(name)\n            name.value = listElement.name\n\n            ;(0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p','Description: ',DOM_Node,['details'])\n            const description = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('input',`${listElement.description}`,DOM_Node,['details','description','edit'])\n            description.value = listElement.description\n            \n            ;(0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p','Complete By: ',DOM_Node,['details'])\n            const dueDate = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('input',`${listElement.dueDate}`,DOM_Node,['details','due-date','edit'])\n            dueDate.value = listElement.dueDate\n            \n            ;(0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p','Priority: ',DOM_Node,['details'])\n            const priority = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('select',`${listElement.priority}`,DOM_Node,['details','priority','edit'])\n            priority.value = listElement.priority\n\n            //create the drop down list for priority\n            const low = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('option','low',priority)\n            low.value = 'low'\n            const normal = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('option','normal',priority)\n            normal.value = 'normal'\n            const high = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('option','high',priority)\n            high.value = 'high'\n            const urgent = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('option','urgent',priority)\n            urgent.value = 'urgent'            \n            ;(0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p','Completion Status:',DOM_Node,['details'])\n            let completionStatus\n            if (listElement.isComplete === false) {\n                completionStatus = 'Incomplete'\n            } else {\n                completionStatus = 'Completed!'\n            }\n\n            //create the drop down list for completion status\n            const isComplete = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('select',`${completionStatus}`,DOM_Node,['details','completion','edit'])\n            isComplete.setAttribute('list','complete-list')\n            const completed = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('option','Completed!',isComplete)\n            completed.value = 'Completed!'\n            const incomplete = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('option','Incomplete',isComplete)\n            incomplete.value = 'Incomplete'\n            isComplete.value = completionStatus\n\n            isEditing = true\n\n            return\n        } else if (isEditing === true) {\n            const name = parent_DOM_Node.querySelector('.edit-name').value\n            const description = DOM_Node.querySelector('.description').value\n            const dueDate = DOM_Node.querySelector('.due-date').value\n            const priority = DOM_Node.querySelector('.priority').value\n            let isComplete\n            if (DOM_Node.querySelector('.completion').value === 'Completed!') {\n                isComplete = true\n            }\n            if (DOM_Node.querySelector('.completion').value === 'Incomplete'){\n                isComplete = false\n            }\n            listElement.editDetails(name,description,dueDate,priority,isComplete)\n\n            isEditing = false\n            ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n            unRenderDOM()\n            renderToDo(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY, TO_DO_DOM)\n        }\n    })\n}\n\n// creates a button that edits the name of a list\nfunction editListNameButton (DOM_Node, listElement) {\n    // create the button and name elements\n    const editListNameButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button','edit name',DOM_Node,['edit-list-name-button'])\n    const spanName = DOM_Node.querySelector('.name')\n\n    let isEditingName = false\n\n    editListNameButton.addEventListener('click', e => {\n        if (isEditingName === false) {\n            // change the edit text to \"save\"\n            editListNameButton.textContent = 'save'\n            // create the text input box\n            const newNameInput = document.createElement('input')\n            newNameInput.value = listElement.name\n            newNameInput.classList.add('new-name-input')\n            spanName.before(newNameInput)\n            // hide the old name\n            spanName.style.display = 'none'\n            isEditingName = true\n        } else if (isEditingName === true) {\n            // get the new name value\n            const newNameInput = DOM_Node.querySelector('.new-name-input')\n            // invoke the edit method on the list\n            listElement.editName(newNameInput.value)\n            isEditingName = false\n            // render\n            ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n            unRenderDOM()\n            renderToDo(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY, TO_DO_DOM)\n        }\n    })\n}\n\n// shows or hides details about each list or task\nfunction showDetailsButton(DOM_Node, listElement) {\n    const details = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p','details',DOM_Node,['details'])\n    const detailsButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button','+',details,['show-details-button'])\n\n    // console.log(listElement.showDetails)\n\n    if (listElement.description) {\n        (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p','Description: ',details,['details'])\n        const description = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p',`${listElement.description}`,details,['details','description','edit'])\n    }\n\n    if (listElement.dueDate) {\n        (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p','Complete By: ',details,['details'])\n        const dueDate = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p',`${listElement.dueDate}`,details,['details','due-date','edit'])\n    }\n\n    if (listElement.priority) {\n        (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p','Priority: ',details,['details'])\n        const priority = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p',`${listElement.priority}`,details,['details','priority','edit'])\n    }\n\n    if (listElement.isComplete === false || listElement.isComplete === true) {\n        let completionStatus\n        if (listElement.isComplete === false) {\n            completionStatus = 'Incomplete'\n        } else {\n            completionStatus = 'Completed!'\n        }\n        const isComplete = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('p',`${completionStatus}`,details,['details','completion','edit'])\n    }\n\n    const detailsArray = details.querySelectorAll('.details')\n        \n    detailsArray.forEach(e => {\n        if (listElement.showDetails === false) {\n            detailsButton.textContent = '+'\n            e.style.display = 'none'\n        } else if (listElement.showDetails === true){\n            detailsButton.textContent = '-'\n            e.style.display = ''\n        }\n    })\n    \n    detailsButton.addEventListener('click', e => {\n        const hideArray = details.querySelectorAll('.details')\n        if (listElement.showDetails === false) {\n            detailsButton.textContent = '-'\n            hideArray.forEach ( thing => {\n                thing.style.display = ''\n            })\n            listElement.showDetails = true\n            // save data to local storage\n            ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n        } else if (listElement.showDetails === true) {\n            detailsButton.textContent = '+'\n            hideArray.forEach ( thing => {\n                thing.style.display = 'none'\n            })\n            listElement.showDetails = false\n            // save data to local storage\n            ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n        }\n    })\n    \n    editButton(details, listElement, DOM_Node)\n    ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n\n    return detailsArray\n}\n\n//variables to control the moveButton functionality.\nlet moveTarget\nlet moveTargetParentList\nlet moveTargetDestination\n\n// allows user to rearrange tasks and lists\nfunction moveButton(DOM_Node, i, parentListElement, element) {\n    let listOrTask\n    // check to see if the chosen element is a list and assign appropriate class\n    if (element.contents) {\n        listOrTask = 'listMoveButton'\n    } else {\n        listOrTask = 'taskMoveButton'\n    }\n    const moveButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button', 'move', DOM_Node,[`${listOrTask}`])\n    moveButton.addEventListener('click', e => {\n        document.querySelector('.master-move-button').style.display = ''\n        // make an array of the task move buttons\n        const taskMoveButtons = document.querySelectorAll('.taskMoveButton')\n        // make array of the list move buttons\n        const listMoveButtons = DOM_Node.querySelectorAll('.listMoveButton')\n        \n        // on the first call, set the chosen element as the moveTarget\n        if (moveTarget === undefined) {\n            moveTarget = i\n            moveTargetParentList = parentListElement\n            \n            \n            // hide taskMoveButtons\n            taskMoveButtons.forEach(button => {\n                button.style.display = 'none'\n            })\n\n            if (moveTargetParentList.contents[moveTarget]) {\n    \n                // hide listMoveButtons\n                listMoveButtons.forEach(button => {\n                    button.style.display = 'none'\n                })\n            }\n            moveButton.style.display = ''\n            moveButton.textContent = 'cancel'\n\n            return\n        } else {\n                document.querySelector('.master-move-button').style.display = 'none'\n            // on the second call, set the chosen element as the destination\n            moveTargetDestination = element\n            if (moveTargetParentList.contents[moveTarget] === moveTargetDestination ) {// bug: if it tries to move into its own chiildren, it will do so and then delete itself)\n                // reinitialize variables and unhide taskMoveButtons\n                moveTarget = undefined\n                moveTargetParentList = undefined\n                moveTargetDestination = undefined\n                taskMoveButtons.forEach(button => {\n                    button.style.display = ''\n                })\n                listMoveButtons.forEach(button => {\n                    button.style.display = ''\n                })\n                moveButton.textContent = 'move'\n            }\n            // check to see if the destination target lies within the contents of moveTarget \n            let targetIsChildList = false\n            if (moveTargetParentList.contents[moveTarget].contents) { \n\n                function targetIsChildListFunc(list) {\n                    list.contents.forEach ( e => {\n                        if (e === element) {\n                            targetIsChildList = true\n                            return\n                        }\n                        if (e.contents) {\n                            targetIsChildListFunc(e)\n                        }\n                    })\n                }\n\n                targetIsChildListFunc(moveTargetParentList.contents[moveTarget])\n\n            } \n            // transfer the moveTarget to its destination\n            if (targetIsChildList === false) {\n                moveTargetParentList.transferTask(moveTarget,moveTargetDestination)\n            }\n\n            // render DOM\n            unRenderDOM()\n            renderToDo(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY, TO_DO_DOM)\n\n            // save data to local storage\n            ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n\n            // reinitialize variables and unhide taskMoveButtons\n            moveTarget = undefined\n            moveTargetParentList = undefined\n            moveTargetDestination = undefined\n            taskMoveButtons.forEach(button => {\n                button.style.display = ''\n            })\n        }\n    })\n}\n\nfunction hideButton(DOM_Node, listElement) {\n    const hideButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button','hide',DOM_Node,['hide-button'])\n    let showList = listElement.showList\n\n    if (showList === false) {\n        hideButton.textContent = 'show'\n    }\n\n    hideButton.addEventListener('click', e => {\n        const childrenArray = DOM_Node.querySelectorAll('.child')\n\n        if (showList === false) {\n            hideButton.textContent = 'hide'\n            childrenArray.forEach (child => {\n                child.style.display = ''\n            })\n            showList = true\n            listElement.showList = true\n        } else if (showList === true) {\n            hideButton.textContent = 'show'\n            childrenArray.forEach (child => {\n                child.style.display = 'none'\n            })\n            showList = false\n            listElement.showList = false\n        }\n        // save data to local storage\n        (0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n    })\n\n    listElement.hasRenderedOnce = true\n}\n\nfunction upButton(DOM_Node, listElement, parentListElement, i) {\n    const upButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button','^',DOM_Node,['up-button'])\n\n    upButton.addEventListener('click', e => {\n        parentListElement.moveTaskUp(i)\n        unRenderDOM()\n        renderToDo(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY, TO_DO_DOM)\n        // save data to local storage\n        ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n    })\n}\n\nfunction downButton(DOM_Node, listElement, parentListElement, i) {\n    const downButton = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('button','v',DOM_Node,['down-button'])\n\n    downButton.addEventListener('click', e => {\n        parentListElement.moveTaskDown(i)\n        unRenderDOM()\n        renderToDo(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY, TO_DO_DOM)\n        // save data to local storage\n        ;(0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_1__.TO_DO_LIBRARY)\n    })\n}\n\n//List rendering function\nfunction renderList(listName, parent_DOM_Node, id, listElement, parentListElement, i) {\n    const list = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('ul','',parent_DOM_Node,['child'],id)\n\n    addButton(list, listElement)\n\n    // create a span that contains the name list's name\n    const name = document.createElement('span')\n    const add = list.querySelector('.add-button')\n    name.textContent = listElement.name\n    name.classList.add('name')\n    add.before(name)\n    \n    deleteButton(list, parentListElement, i)\n    moveButton(list, i, parentListElement, listElement)\n    upButton(list,listElement,parentListElement, i)\n    downButton(list,listElement,parentListElement, i)\n    hideButton(list, listElement)\n    editListNameButton(list, listElement)\n\n    if (parentListElement.showList === false) {\n        list.style.display = 'none'\n    }\n  \n    return list\n}\n\n// Task rendering function\nfunction renderTask(taskName, parent_DOM_Node, id, listElement, parentListElement, i) {\n    const task = (0,_createElement__WEBPACK_IMPORTED_MODULE_0__.createElement)('ul','',parent_DOM_Node,['child'],id)    \n    \n    checkBox(task, listElement)\n    \n    // create a span that contains the name task's name\n    const name = document.createElement('span')\n    const checkbox = task.querySelector('.checkbox')\n    name.textContent = listElement.name\n    name.classList.add('details')\n    name.classList.add('name')\n    checkbox.before(name)  \n    \n    deleteButton(task, parentListElement, i)\n    moveButton(task, i, parentListElement, listElement)\n    upButton(task,listElement,parentListElement, i)\n    downButton(task,listElement,parentListElement, i)\n    showDetailsButton(task, listElement)\n\n    const hideButtonElement = task.querySelector('.hide-button')    \n    \n    if (parentListElement.showList === false) {\n        task.style.display = 'none'\n    }\n\n    return task\n}\n\nfunction unRenderDOM() {\n    while (TO_DO_DOM.firstChild) {\n        TO_DO_DOM.firstChild.remove()\n    }\n}\n\n\n\n//# sourceURL=webpack://todo-actual/./src/DOM.js?");

/***/ }),

/***/ "./src/convertJSON.js":
/*!****************************!*\
  !*** ./src/convertJSON.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseNewList: () => (/* binding */ parseNewList)\n/* harmony export */ });\n/* harmony import */ var _todo_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./todo-list */ \"./src/todo-list.js\");\n\n\n// this function reads the parsed JSON and invokes List and Task constructors and appends them to toDoLibrary\nfunction parseNewList (parsedJSON, newListElement) {\n\n    parsedJSON.contents.forEach(element => {\n    \n        if (element.type === 'list') {\n            // create List\n            const list = new _todo_list__WEBPACK_IMPORTED_MODULE_0__.List (element.name)\n\n            //copy over any other list attributes\n            list.showList = element.showList\n            list.hasRenderedOnce = element.showList\n            // add it to the new library\n            newListElement.appendTask(list)\n            // since it's a list, recurse and run the function again on its contents to append its children and so on\n            parseNewList(element,list)\n        } else if (element.type === 'task') {\n            // create the task\n            const task = new _todo_list__WEBPACK_IMPORTED_MODULE_0__.Task(element.name,element.description,element.dueDate,element.priority)\n\n            //copy over other task attributes\n            task.isComplete = element.isComplete\n            task.showDetails = element.showDetails\n\n            // add it to the library...\n            newListElement.appendTask(task)\n        }\n    });\n}\n\n\n\n//# sourceURL=webpack://todo-actual/./src/convertJSON.js?");

/***/ }),

/***/ "./src/createElement.js":
/*!******************************!*\
  !*** ./src/createElement.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createElement: () => (/* binding */ createElement),\n/* harmony export */   returnElementByID: () => (/* binding */ returnElementByID)\n/* harmony export */ });\nconst createElement = (element,content,parent,htmlClass,htmlID) => {\n    const newElement = document.createElement(`${element}`)\n    newElement.innerText = content\n    if(htmlClass){\n        htmlClass.forEach(element => {\n            newElement.classList.add(element)\n        });\n    }\n    if(htmlID) {newElement.setAttribute('id',htmlID)}\n    parent.appendChild(newElement)\n    return newElement\n}\n\nconst returnElementByID = (htmlID) => {\n    const element = document.getElementById(`${htmlID}`)\n    return element\n}\n\n\n\n//# sourceURL=webpack://todo-actual/./src/createElement.js?");

/***/ }),

/***/ "./src/evalString.js":
/*!***************************!*\
  !*** ./src/evalString.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseListPos: () => (/* binding */ parseListPos)\n/* harmony export */ });\n// with TO_DO_LIBRARY as the unchanging topmost level of the data, we can consistently use it to path our way deeper. \n\n// given a string of listpos0++0++0++1 we need to first transform it into this:\n// TO_DO_LIBRARY.contents[0].contents[0].contents[1]\n\n// use string conversion via the split string method with \"++\" as a delimiter\n// let unparsedString =  'listpos0++0++0++1'\n// let parsedString = unparsedString.split('++')\n// // parsedString = ['listpos0', '0', '0', '1']\n// parsedString[0] = parsedString[0].slice(7)\n// // parsedString =  ['0', '0', '0', '1']\n// TO_DO_LIBRARY.contents[parsedString[0]]\n\nfunction parseListPos(listPos) {\n    let parsedString = listPos.split('++')\n    parsedString[0] = parsedString[0].slice(7)\n    let path = 'toDoLibrary'\n    let i = 0\n    while (i < parsedString.length) {\n        path += `.contents[${parsedString[i]}]`\n        i++\n    }\n    return path\n}\n\n\n\n\n//# sourceURL=webpack://todo-actual/./src/evalString.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _todo_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./todo-list */ \"./src/todo-list.js\");\n/* harmony import */ var _DOM__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./DOM */ \"./src/DOM.js\");\n/* harmony import */ var _convertJSON__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./convertJSON */ \"./src/convertJSON.js\");\n/* harmony import */ var _localStorage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./localStorage */ \"./src/localStorage\");\n\n\n\n\n\n// const makeBed = new Task('Make Bed', 'clean your bed', '6/23/2023', 'high')\n// const cleanDishes = new Task('Clean Dishes', 'Load dishes into dishwasher and run the load.', '6/23/2023', 'high')\n// const washClothes = new Task('Wash Clothes', 'Load washing machine and run a cycle', '6/23/2023', 'high')\n// const driveToWork = new Task('Drive to Work', 'Get in your car and drive down the freeway', '6/24/2024', 'high')\n// const ironClothes = new Task('Iron Clothes', 'Iron three shirts', '6/23/2023', 'high')\n// const goToLunch = new Task('Go to Lunch', 'Eat lunch at Drafty\\'s Burgers', '6/23/2023', 'high')\n// const submitReports = new Task('Submit Reports', 'submit the reports by three o\\'clock', '6/23/2023', 'high')\n// const clockOut = new Task('Clock Out', 'Go home', '6/23/2023', 'high')\n\n// const myChores = new List('Chores')\n// const lifeTasks = new List('Life Tasks')\n// const workTasks = new List('Work Tasks')\n\n// const miscTask1 = new Task('Eat Second Breakfast', '', '6/23/2023', 'high')\n// const miscTask2 = new Task('Eat Afternoon Snack', '', '6/23/2023', 'high')\n\n// toDoLibrary.appendTask(lifeTasks)\n// lifeTasks.appendTask(myChores)\n// lifeTasks.appendTask(driveToWork)\n// myChores.appendTask(makeBed)\n// myChores.appendTask(cleanDishes)\n// myChores.appendTask(washClothes)\n// lifeTasks.appendTask(ironClothes)\n// toDoLibrary.appendTask(miscTask1)\n// toDoLibrary.appendTask(miscTask2)\n// toDoLibrary.appendTask(workTasks)\n// workTasks.appendTask(goToLunch)\n// workTasks.appendTask(submitReports)\n// workTasks.appendTask(clockOut)\n\n// miscTask1.editDetails('Don\\'t eat second breakfast', '', '7/23/2024', 'low', false)\n\n// myChores.editName('Boring Chores')\n\n// toDoLibrary.editTask(2, 'Don\\'t eat afternoon snack', '', '2/23/7272', 'medium', false)\n\n// myChores.moveTaskDown(1)\n\n\n// if there's no prior data detected , save ToDo to local storage\n\nif ((0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.parseStringFromLocalStorage)('ToDo') === null) {\n    (0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.saveObjectToLocalStorage)(_todo_list__WEBPACK_IMPORTED_MODULE_0__.TO_DO_LIBRARY)\n}\n\n//read saved to do list data\n\n(0,_convertJSON__WEBPACK_IMPORTED_MODULE_2__.parseNewList)((0,_localStorage__WEBPACK_IMPORTED_MODULE_3__.parseStringFromLocalStorage)('ToDo'),_todo_list__WEBPACK_IMPORTED_MODULE_0__.TO_DO_LIBRARY)\n\n//render data\n;(0,_DOM__WEBPACK_IMPORTED_MODULE_1__.renderToDo)(_todo_list__WEBPACK_IMPORTED_MODULE_0__.TO_DO_LIBRARY, _DOM__WEBPACK_IMPORTED_MODULE_1__.TO_DO_DOM)\n\n//# sourceURL=webpack://todo-actual/./src/index.js?");

/***/ }),

/***/ "./src/localStorage":
/*!**************************!*\
  !*** ./src/localStorage ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   parseStringFromLocalStorage: () => (/* binding */ parseStringFromLocalStorage),\n/* harmony export */   saveObjectToLocalStorage: () => (/* binding */ saveObjectToLocalStorage)\n/* harmony export */ });\n/* harmony import */ var _todo_list__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./todo-list */ \"./src/todo-list.js\");\n\n\n// stringifies an object and saves it in localStorage.\nfunction saveObjectToLocalStorage(object) {\n    localStorage.setItem(`${object.name}`,JSON.stringify(object))\n}\n\n// retrieves an object from local storage \nfunction parseStringFromLocalStorage(stringName) {\n    return JSON.parse(localStorage.getItem(stringName))\n}\n\n\n\n//# sourceURL=webpack://todo-actual/./src/localStorage?");

/***/ }),

/***/ "./src/todo-list.js":
/*!**************************!*\
  !*** ./src/todo-list.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   List: () => (/* binding */ List),\n/* harmony export */   TO_DO_LIBRARY: () => (/* binding */ TO_DO_LIBRARY),\n/* harmony export */   Task: () => (/* binding */ Task),\n/* harmony export */   addListFunctions: () => (/* binding */ addListFunctions),\n/* harmony export */   addTaskFunctions: () => (/* binding */ addTaskFunctions)\n/* harmony export */ });\n\n\nconst List = class List {\n    constructor(name) {\n        this.name = name,\n        this.deleteTask = (taskNumber) => {\n            this.contents.push(this.contents.splice(taskNumber, 1)[0]);\n            this.contents.pop()\n        },\n        this.contents = [],\n        // allows user to organize tasks and lists after appending them.\n        this.transferTask = (taskNumber,newList) => {\n            newList.contents.push(this.contents[taskNumber]);\n            this.deleteTask(taskNumber);\n            this.isOpened = true\n        },\n        this.appendTask = (task) => {\n            this.contents.push(task)\n            this.isOpened = true\n        },\n        this.editName = (newName) => {\n            this.name = newName\n        },\n        this.editTask = (taskNumber, name, description, dueDate, priority, isComplete) => {\n            this.contents[taskNumber].editDetails(name, description, dueDate, priority, isComplete)\n        },\n\n        this.showList = true,\n        this.hasRenderedOnce = false,\n        this.type = 'list',\n        this.moveTaskUp = (taskNumber) => {\n            const taskDestination = taskNumber - 1\n            if (taskDestination === -1) {\n                return\n            } else {\n                const f = this.contents.splice(taskNumber,1)[0]\n                this.contents.splice(taskDestination,0,f)\n                return\n            }\n        },\n        this.moveTaskDown = (taskNumber) => {\n            const taskDestination = taskNumber + 1\n            if (taskDestination === this.contents.length) {\n                return\n            } else {\n                const f = this.contents.splice(taskNumber,1)[0]\n                this.contents.splice(taskDestination,0,f)\n                return\n            }\n        }\n    }\n}\n\nconst Task = class Task {\n    constructor(name,description,dueDate,priority) {\n        this.name = name,\n        this.description = description,\n        this.dueDate = dueDate,\n        this.priority = priority,\n        this.isComplete = false,\n        this.completeTask = () => {\n            if (this.isComplete == false) {\n                this.isComplete = true\n            } else {\n            if (this.isComplete == true) {\n                this.isComplete = false\n            }}\n        },\n        this.editDetails = (name, description, dueDate, priority,isComplete) => {\n            this.name = name,\n            this.description = description,\n            this.dueDate = dueDate,\n            this.priority = priority,\n            this.isComplete = isComplete\n        },\n        this.showDetails = false,\n        this.type = 'task'\n    }\n}\n\nfunction addListFunctions (obj) {\n    obj.deleteTask = function(taskNumber) {\n        obj.contents.push(obj.contents.splice(taskNumber, 1)[0]);\n        obj.contents.pop()\n    },\n    obj.transferTask = (taskNumber,newList) => {\n        newList.contents.push(obj.contents[taskNumber]);\n        obj.deleteTask(taskNumber);\n        obj.isOpened = true\n    },\n    obj.appendTask = (task) => {\n        obj.contents.push(task)\n        obj.isOpened = true\n    },\n    obj.editName = (newName) => {\n        obj.name = newName\n    },\n    obj.editTask = (taskNumber, name, description, dueDate, priority, isComplete) => {\n        obj.contents[taskNumber].editDetails(name, description, dueDate, priority, isComplete)\n    }\n    return obj\n}\n\nfunction addTaskFunctions (obj) {\n    obj.completeTask = () => {\n        if (obj.isComplete == false) {\n            obj.isComplete = true\n        } else {\n        if (obj.isComplete == true) {\n            obj.isComplete = false\n        }}\n    },\n    obj.editDetails = (name, description, dueDate, priority,isComplete) => {\n        obj.name = name,\n        obj.description = description,\n        obj.dueDate = dueDate,\n        obj.priority = priority,\n        obj.isComplete = isComplete\n    }\n    return obj\n}\n\nfunction addFunctionsToList(list) {\n    \n}\n\nlet TO_DO_LIBRARY = new List('ToDo')\n\n\n\n//# sourceURL=webpack://todo-actual/./src/todo-list.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;